name: CI/CD
on:
  push:
    branches:
      - master
jobs:
  lint:
    name: Check code linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Load & cache dependencies
        uses: ./.github/actions/cached-deps
      - name: Run lint
        run: yarn lint
  # docker:
  #   name: Build and Push Docker Image
  #   runs-on: ubuntu-latest
  #   needs: lint
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Load & cache dependencies
  #       uses: ./.github/actions/cached-deps
  #     - name: Set up QEMU
  #       uses: docker/setup-qemu-action@v3
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         push: true
  #         tags: daogiahai/game-rental-management-server:latest
  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    # needs: [docker]
    needs: lint
    env:
      PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
      PUBLIC_DNS: ${{ secrets.PUBLIC_DNS }}
    steps:
      - name: Create PEM file
        run: |
          echo "$PRIVATE_KEY" > private_key.pem && chmod 600 private_key.pem
      - name: Connect to EC2 instance
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem "$PUBLIC_DNS" "echo Connected to EC2 instance"
      - name: Connect to EC2 and Deploy
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          # ssh -o StrictHostKeyChecking=no -i private_key "$PUBLIC_DNS" "
          #   echo Connected to EC2 instance &&
          #   docker pull daogiahai/game-rental-management-server:latest &&
          #   docker stop game-rental-management-server &&
          #   docker rm game-rental-management-server &&
          #   docker-compose -f /home/ubuntu/game-rental-management-server/docker-compose.yml up -d &&
          #   docker image prune -f &&
          #   echo 'Server is running at ${{ secrets.PUBLIC_DNS }}:3000'"
